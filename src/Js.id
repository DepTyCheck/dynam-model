module Js

record FunSig where
    constructor Function
    From : List Type
    To   : Type

infix 6 ==>

(==>) : List Type -> Type -> FunSig
(==>) x y = Function x y

StdF : List (String, FunSig)
StdF = [ ("+" , [Int, Int] ==>  Int),
         ("<" , Function [Int, Int]   Bool),
         ("++", Function [Int]        Int),
         ("||", Function [Bool, Bool] Bool) ]

contains : Ord ty => (el : ty) -> List ty -> Bool
contains el [] = False
contains el (x :: xs) = case el == x of
                        True => True
                        False => (contains el xs)


vincludes : (el : String) -> List (String, Type) -> Bool
vincludes el [] = False
vincludes el ((x_name, x_type) :: xs) =
            case el == x_name of
                True => True
                False => (vincludes el xs)

data Vsincludes : (el : String) -> List (String, Type) -> Type where
    Contains : (el : String) -> (li : List (String, Type)) -> el `vincludes` li = True => Vsincludes el li

(.includes) : Vsincludes el li -> Type
(.includes) $ Contains el [] = ?hls -- proove
(.includes) $ Contains el ((x_name, x_type) :: xs) = case el == x_name of
                True => x_type
                False => ?hls1
                -- False => (Contains el xs).includes
            
-- (.includes) el [] = ?hls
-- (.includes) {el : String, ((x_name, x_type) :: xs) : List (String, FunSig)} =
--             case el == x_name of
--                 True => x_type
--                 False => ((.includes) el xs)

-- record Contain where
--     constructor IsIn
--     el    : String
--     list  : List (String, Type)
--     found = (contains el list) => el


data Expr : List (String, FunSig) -> List (String, Type) -> Type -> Type where
    Const : Ord ty => (x : ty) -> Expr funs vars ty
    -- let _
    Let : (n : String) -> (0 lk : n `Vsincludes` vars) =>
        Expr funs vars lk.includes
    -- (_) => {...}
    -- F : (n : String) -> (lk : n `includes` funs) =>
    --   All (Expr funs vars) lk.found.From ->
    --   Expr funs vars lk.found.To



-- data Stmts : (funs  : List (Name, FunSig)) ->
--              (preV  : List (Name, Type)) ->
--              (postV : List (Name, Type)) -> Type where
--     (.)  : (ty : Type) -> (n : Name) ->
--         Stmts funs vars ((n, ty)::vars)
--     (#=) : (n : Name) -> (0 lk : n `IsIn` vars) =>
--         (v : Expr funs vars lk.found) ->
--         Stmts funs vars vars
--     If : (cond : Expr funs vars Bool) ->
--         Stmts funs vars vThen -> Stmts funs vars vElse ->
--         Stmts funs vars vars



-- test : String
-- test = "Hello from Idris2!"


-- data UnaryExpression = UpdateExpression
--     | AwaitExpression
--     | increment  UnaryExpression
--     | decrement  UnaryExpression
--     | positive  UnaryExpression
--     | negative  UnaryExpression
--     | invert  UnaryExpression
--     | negate UnaryExpression
--     | delete UnaryExpression
--     | void UnaryExpression
--     | typeof UnaryExpression

-- -- plus : UnaryExpression -> UnaryExpression -> UnaryExpression

-- data ExponentiationExpression = UnaryExpression
--     | Pow UpdateExpression ExponentiationExpression

-- data MultiplicativeOperator = Prod | Div | Mod

-- data MultiplicativeExpression = MultiplicativeOperator MultiplicativeExpression ExponentiationExpression 
--     | 

-- data AdditiveExpression = fromMultiplicative MultiplicativeExpression
--     | plus AdditiveExpression MultiplicativeExpression
--     | minus AdditiveExpression MultiplicativeExpression
-- --     -- UpdateExpression
-- --     -- AwaitExpression

-- data LogicalExpression = ORExpression 

-- data ShiftExpression = fromAdditive AdditiveExpression
--     | shl ShiftExpression AdditiveExpression
--     | shr ShiftExpression AdditiveExpression



-- data RelationalExpression = ShiftExpression 
--     | lt RelationalExpression ShiftExpression
--     | gt RelationalExpression ShiftExpression
--     | le RelationalExpression ShiftExpression
--     | ge RelationalExpression ShiftExpression




-- data Braces = LeftBrace | RightBrace

-- data AssignmentExpression = 

-- data Arguments = LeftBrace
-- data SuperCall = super 


-- data LeftHandSideExpression =

-- data UpdateExpression = 


data N = Zero | Succ N


sum : N -> N -> N
sum Zero x = x
sum (Succ x) y = Succ (sum x y)

min : N -> N -> N
min x y = ?min_rhs


toNat : N -> Nat
toNat Zero = Z
toNat (Succ x) = S (toNat x)

-- printLn toNat (sum (Succ (Succ (Succ Zero))) (Succ Zero))
main : IO ()
main = printLn (toNat (sum (Succ (Succ (Succ Zero))) (Succ Zero)))
-- main = putStrLn "hi"
 
 